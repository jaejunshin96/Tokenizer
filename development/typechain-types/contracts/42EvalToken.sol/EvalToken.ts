/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace EvalToken {
  export type EvaluationRequestStruct = {
    evalId: BigNumberish;
    evaluatee: AddressLike;
    evaluator: AddressLike;
    evalStatus: BigNumberish;
    isEvaluateeApproved: boolean;
    isEvaluatorApproved: boolean;
  };

  export type EvaluationRequestStructOutput = [
    evalId: bigint,
    evaluatee: string,
    evaluator: string,
    evalStatus: bigint,
    isEvaluateeApproved: boolean,
    isEvaluatorApproved: boolean
  ] & {
    evalId: bigint;
    evaluatee: string;
    evaluator: string;
    evalStatus: bigint;
    isEvaluateeApproved: boolean;
    isEvaluatorApproved: boolean;
  };
}

export interface EvalTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REQUEST_FEE"
      | "WELCOME_TOKEN"
      | "acceptEvaluation"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "completeEvalution"
      | "decimals"
      | "evaluationPool"
      | "front"
      | "getOngoingEvaluations"
      | "getPendingSize"
      | "hasJoined"
      | "mint"
      | "name"
      | "owner"
      | "pendingSize"
      | "rear"
      | "renounceOwnership"
      | "requestEvaluation"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "welcome"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "EvaluationAccepted"
      | "EvaluationCompleted"
      | "EvaluationRequested"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REQUEST_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WELCOME_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptEvaluation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeEvalution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evaluationPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "front", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOngoingEvaluations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasJoined",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rear", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEvaluation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "welcome", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "REQUEST_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WELCOME_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptEvaluation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeEvalution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evaluationPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "front", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOngoingEvaluations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasJoined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEvaluation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "welcome", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvaluationAcceptedEvent {
  export type InputTuple = [evalId: BigNumberish, evaluator: AddressLike];
  export type OutputTuple = [evalId: bigint, evaluator: string];
  export interface OutputObject {
    evalId: bigint;
    evaluator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvaluationCompletedEvent {
  export type InputTuple = [evalId: BigNumberish];
  export type OutputTuple = [evalId: bigint];
  export interface OutputObject {
    evalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvaluationRequestedEvent {
  export type InputTuple = [evalId: BigNumberish, evaluatee: AddressLike];
  export type OutputTuple = [evalId: bigint, evaluatee: string];
  export interface OutputObject {
    evalId: bigint;
    evaluatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EvalToken extends BaseContract {
  connect(runner?: ContractRunner | null): EvalToken;
  waitForDeployment(): Promise<this>;

  interface: EvalTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REQUEST_FEE: TypedContractMethod<[], [bigint], "view">;

  WELCOME_TOKEN: TypedContractMethod<[], [bigint], "view">;

  acceptEvaluation: TypedContractMethod<[], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  completeEvalution: TypedContractMethod<
    [evalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  evaluationPool: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, boolean] & {
        evalId: bigint;
        evaluatee: string;
        evaluator: string;
        evalStatus: bigint;
        isEvaluateeApproved: boolean;
        isEvaluatorApproved: boolean;
      }
    ],
    "view"
  >;

  front: TypedContractMethod<[], [bigint], "view">;

  getOngoingEvaluations: TypedContractMethod<
    [],
    [EvalToken.EvaluationRequestStructOutput[]],
    "view"
  >;

  getPendingSize: TypedContractMethod<[], [bigint], "view">;

  hasJoined: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingSize: TypedContractMethod<[], [bigint], "view">;

  rear: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestEvaluation: TypedContractMethod<[], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  welcome: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REQUEST_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WELCOME_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptEvaluation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeEvalution"
  ): TypedContractMethod<[evalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "evaluationPool"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, boolean] & {
        evalId: bigint;
        evaluatee: string;
        evaluator: string;
        evalStatus: bigint;
        isEvaluateeApproved: boolean;
        isEvaluatorApproved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "front"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOngoingEvaluations"
  ): TypedContractMethod<
    [],
    [EvalToken.EvaluationRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasJoined"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestEvaluation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "welcome"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "EvaluationAccepted"
  ): TypedContractEvent<
    EvaluationAcceptedEvent.InputTuple,
    EvaluationAcceptedEvent.OutputTuple,
    EvaluationAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "EvaluationCompleted"
  ): TypedContractEvent<
    EvaluationCompletedEvent.InputTuple,
    EvaluationCompletedEvent.OutputTuple,
    EvaluationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EvaluationRequested"
  ): TypedContractEvent<
    EvaluationRequestedEvent.InputTuple,
    EvaluationRequestedEvent.OutputTuple,
    EvaluationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "EvaluationAccepted(uint256,address)": TypedContractEvent<
      EvaluationAcceptedEvent.InputTuple,
      EvaluationAcceptedEvent.OutputTuple,
      EvaluationAcceptedEvent.OutputObject
    >;
    EvaluationAccepted: TypedContractEvent<
      EvaluationAcceptedEvent.InputTuple,
      EvaluationAcceptedEvent.OutputTuple,
      EvaluationAcceptedEvent.OutputObject
    >;

    "EvaluationCompleted(uint256)": TypedContractEvent<
      EvaluationCompletedEvent.InputTuple,
      EvaluationCompletedEvent.OutputTuple,
      EvaluationCompletedEvent.OutputObject
    >;
    EvaluationCompleted: TypedContractEvent<
      EvaluationCompletedEvent.InputTuple,
      EvaluationCompletedEvent.OutputTuple,
      EvaluationCompletedEvent.OutputObject
    >;

    "EvaluationRequested(uint256,address)": TypedContractEvent<
      EvaluationRequestedEvent.InputTuple,
      EvaluationRequestedEvent.OutputTuple,
      EvaluationRequestedEvent.OutputObject
    >;
    EvaluationRequested: TypedContractEvent<
      EvaluationRequestedEvent.InputTuple,
      EvaluationRequestedEvent.OutputTuple,
      EvaluationRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
